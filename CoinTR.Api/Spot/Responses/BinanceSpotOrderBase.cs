namespace CoinTR.Api.Spot;

/// <summary>
/// The result of placing a new order
/// </summary>
public record BinancePlacedOrder : BinanceSpotOrderBase
{
    /// <summary>
    /// The time the order was placed
    /// </summary>
    [JsonProperty("transactTime"), JsonConverter(typeof(DateTimeConverter))]
    public new DateTime CreateTime { get; set; }

    /// <summary>
    /// Trades for the order
    /// </summary>
    [JsonProperty("fills")]
    public List<BinanceSpotOrderTrade> Fills { get; set; } = [];

    /// <summary>
    /// Only present if a margin trade happened
    /// </summary>
    [JsonProperty("marginBuyBorrowAmount")]
    public decimal? MarginBuyBorrowQuantity { get; set; }

    /// <summary>
    /// Only present if a margin trade happened
    /// </summary>
    public string MarginBuyBorrowAsset { get; set; } = "";
}

/// <summary>
/// Order info
/// </summary>
public record BinanceSpotOrderBase
{
    /// <summary>
    /// The symbol the order is for
    /// </summary>
    [JsonProperty("symbol")]
    public string Symbol { get; set; } = "";
    /// <summary>
    /// The order id generated by Binance
    /// </summary>
    [JsonProperty("orderId")]
    public long Id { get; set; }

    /// <summary>
    /// Id of the order list this order belongs to
    /// </summary>
    [JsonProperty("orderListId")]
    public long OrderListId { get; set; }

    /// <summary>
    /// Original order id
    /// </summary>
    [JsonProperty("origClientOrderId")]
    public string OriginalClientOrderId { get; set; } = "";

    /// <summary>
    /// The order id as assigned by the client
    /// </summary>
    [JsonProperty("clientOrderId")]
    public string ClientOrderId { get; set; } = "";

    private decimal _price;

    /// <summary>
    /// The price of the order
    /// </summary>
    [JsonProperty("price")]
    public decimal Price
    {
        get
        {
            if (_price == 0 && Type == CoinTRSpotOrderType.Market && QuantityFilled != 0)
                return QuoteQuantityFilled / QuantityFilled;
            return _price;
        }
        set => _price = value;
    }

    /// <summary>
    /// The original quantity of the order, as specified in the order parameters by the user
    /// </summary>
    [JsonProperty("origQty")]
    public decimal Quantity { get; set; }

    /// <summary>
    /// The currently executed quantity of the order
    /// </summary>
    [JsonProperty("executedQty")]
    public decimal QuantityFilled { get; set; }

    /// <summary>
    /// The currently executed amount of quote asset. Amounts to Sum(quantity * price) of executed trades for this order
    /// </summary>
    [JsonProperty("cummulativeQuoteQty")]
    public decimal QuoteQuantityFilled { get; set; }

    /// <summary>
    /// The original quote order quantity of the order, as specified in the order parameters by the user
    /// </summary>
    [JsonProperty("origQuoteOrderQty")]
    public decimal QuoteQuantity { get; set; }

    /// <summary>
    /// The status of the order
    /// </summary>
    [JsonProperty("status")]
    public BinanceOrderStatus Status { get; set; }

    /// <summary>
    /// How long the order is active
    /// </summary>
    [JsonProperty("timeInForce")]
    public CoinTRSpotTimeInForce TimeInForce { get; set; }

    /// <summary>
    /// The type of the order
    /// </summary>
    [JsonProperty("type")]
    public CoinTRSpotOrderType Type { get; set; }

    /// <summary>
    /// The side of the order
    /// </summary>
    [JsonProperty("side")]
    public CoinTRSpotOrderSide Side { get; set; }

    /// <summary>
    /// The stop price
    /// </summary>
    [JsonProperty("stopPrice")]
    public decimal? StopPrice { get; set; }

    /// <summary>
    /// The iceberg quantity
    /// </summary>
    [JsonProperty("icebergQty")]
    public decimal? IcebergQuantity { get; set; }

    /// <summary>
    /// The time the order was submitted
    /// </summary>
    [JsonProperty("time"), JsonConverter(typeof(DateTimeConverter))]
    public DateTime CreateTime { get; set; }

    /// <summary>
    /// The time the order was last updated
    /// </summary>
    [JsonConverter(typeof(DateTimeConverter))]
    [JsonProperty("updateTime")]
    public DateTime? UpdateTime { get; set; }

    /// <summary>
    /// The time the transaction was executed (when canceling order)
    /// </summary>
    [JsonConverter(typeof(DateTimeConverter))]
    [JsonProperty("transactTime")]
    public DateTime? TransactTime { get; set; }

    /// <summary>
    /// When the order started working
    /// </summary>
    [JsonConverter(typeof(DateTimeConverter))]
    [JsonProperty("workingTime")]
    public DateTime? WorkingTime { get; set; }

    /// <summary>
    /// Is working
    /// </summary>
    [JsonProperty("isWorking")]
    public bool? IsWorking { get; set; }

    /// <summary>
    /// If isolated margin (for margin account orders)
    /// </summary>
    [JsonProperty("isIsolated")]
    public bool? IsIsolated { get; set; }

    /// <summary>
    /// Quantity which is still open to be filled
    /// </summary>
    public decimal QuantityRemaining => Quantity - QuantityFilled;

    /// <summary>
    /// The average price the order was filled
    /// </summary>
    public decimal? AverageFillPrice
    {
        get
        {
            if (QuantityFilled == 0)
                return null;

            return QuoteQuantityFilled / QuantityFilled;
        }
    }

    /// <summary>
    /// Self trade prevention mode
    /// </summary>
    [JsonProperty("selfTradePreventionMode")]
    public CoinTRSpotSelfTradePreventionMode SelfTradePreventionMode { get; set; }
}